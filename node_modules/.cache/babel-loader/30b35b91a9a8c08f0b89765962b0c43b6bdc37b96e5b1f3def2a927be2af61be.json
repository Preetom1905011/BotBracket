{"ast":null,"code":"var _jsxFileName = \"/Users/preetombiswas/ASU/PersonalProjects/botbracket/src/components/MatchScene.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../styles/matchScene.css';\nimport MatchCard from './MatchCard';\nimport scrappyRed from '../media/Updated_Logo_red.png';\nimport scrappyBlue from '../media/Updated_Logo_blue2.png';\nimport vs_logo from '../media/VS_img2.png';\nimport WinToggle from './WinToggle';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MatchScene(_ref) {\n  _s();\n  let {\n    names,\n    setNames\n  } = _ref;\n  const [outRed, setOutRed] = useState({\n    id: \"\",\n    bet: 0,\n    result: \"\"\n  });\n  const [outBlue, setOutBlue] = useState({\n    id: \"\",\n    bet: 0,\n    result: \"\"\n  });\n  const [toggleState, setToggleState] = useState('na');\n  const handleEndMatch = e => {\n    let winnerName = {\n      id: \"\"\n    };\n    let loserName = {\n      id: \"\"\n    };\n    if (outRed.result === \"winner\" && outBlue.result === \"loser\") {\n      winnerName = outRed;\n      loserName = outBlue;\n    } else if (outRed.result === \"loser\" && outBlue.result === \"winner\") {\n      winnerName = outBlue;\n      loserName = outRed;\n    }\n    const edited = names.map(name => {\n      if (name.id === winnerName.id) {\n        return {\n          ...name,\n          chip: parseInt(name.chip) + parseInt(loserName.bet)\n        };\n      } else if (name.id === loserName.id) {\n        return {\n          ...name,\n          chip: parseInt(name.chip) - parseInt(loserName.bet)\n        };\n      } else return name;\n    });\n    console.log(loserName);\n    console.log(winnerName);\n    handleSortName(edited);\n    setToggleState;\n  };\n  const handleSortName = names => {\n    // set the state to the newly created sorted array with the three dots operator:\n    setNames([...names].sort((a, b) => b.chip - a.chip));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"backdrop\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"side-grid\",\n      children: [/*#__PURE__*/_jsxDEV(MatchCard, {\n        names: names,\n        outcome: outRed,\n        setOutcome: setOutRed,\n        select_style: \"fighter-select\",\n        confirm_style: \"fighter-confirmed\",\n        scrappy: scrappyRed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: vs_logo,\n        className: \"vs_img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MatchCard, {\n        names: names,\n        outcome: outBlue,\n        setOutcome: setOutBlue,\n        select_style: \"fighter-select fighter-select2\",\n        confirm_style: \"fighter-confirmed fighter-confirmed2\",\n        scrappy: scrappyBlue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(WinToggle, {\n      outRed: outRed,\n      setOutRed: setOutRed,\n      outBlue: outBlue,\n      setOutBlue: setOutBlue,\n      toggleState: toggleState,\n      setToggleState: setToggleState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEndMatch,\n      children: \"End Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match-history\",\n      children: \"Match History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(MatchScene, \"tVYxQ4ZAtmeew+Rm1oUJvQXdZ6g=\");\n_c = MatchScene;\nvar _c;\n$RefreshReg$(_c, \"MatchScene\");","map":{"version":3,"names":["React","MatchCard","scrappyRed","scrappyBlue","vs_logo","WinToggle","useState","MatchScene","names","setNames","outRed","setOutRed","id","bet","result","outBlue","setOutBlue","toggleState","setToggleState","handleEndMatch","e","winnerName","loserName","edited","map","name","chip","parseInt","console","log","handleSortName","sort","a","b"],"sources":["/Users/preetombiswas/ASU/PersonalProjects/botbracket/src/components/MatchScene.js"],"sourcesContent":["import React from 'react'\nimport '../styles/matchScene.css'\nimport MatchCard from './MatchCard'\nimport scrappyRed from '../media/Updated_Logo_red.png'; \nimport scrappyBlue from '../media/Updated_Logo_blue2.png'; \nimport vs_logo from '../media/VS_img2.png'; \nimport WinToggle from './WinToggle';\nimport { useState } from 'react';\n\nexport default function MatchScene({names, setNames}) {\n\n  const [outRed, setOutRed] = useState({id:\"\", bet:0, result:\"\"});\n  const [outBlue, setOutBlue] = useState({id:\"\", bet:0, result:\"\"});\n  const [toggleState, setToggleState] = useState('na');\n\n  const handleEndMatch = (e) => {\n    let winnerName = {id:\"\"};\n    let loserName = {id:\"\"};\n    \n    if (outRed.result === \"winner\" && outBlue.result === \"loser\"){\n      winnerName = outRed;\n      loserName = outBlue;\n    }\n    else if (outRed.result === \"loser\" && outBlue.result === \"winner\"){\n      winnerName = outBlue;\n      loserName = outRed;\n    }\n    \n    const edited = names.map(name =>{\n      if (name.id === winnerName.id) {\n          return { ...name, chip: parseInt(name.chip) + parseInt(loserName.bet)};\n      }\n      else if (name.id === loserName.id) {\n        return { ...name, chip: parseInt(name.chip) - parseInt(loserName.bet)};\n      }\n      else return name;\n    });\n    console.log(loserName);\n    console.log(winnerName);\n    handleSortName(edited);\n    setToggleState\n  }\n\n  const handleSortName = (names) => {\n    // set the state to the newly created sorted array with the three dots operator:\n    setNames(\n      [...names].sort((a, b) => b.chip - a.chip)\n    );\n  };\n\n  return (\n    <div className='backdrop'>\n        <div className='side-grid'>\n          <MatchCard \n              names={names} \n              outcome={outRed}\n              setOutcome={setOutRed}\n              select_style={\"fighter-select\"} \n              confirm_style={\"fighter-confirmed\"}\n              scrappy={scrappyRed}></MatchCard>\n          <img src={vs_logo} className=\"vs_img\"/>\n          <MatchCard \n              names={names} \n              outcome={outBlue}\n              setOutcome={setOutBlue}\n              select_style={\"fighter-select fighter-select2\"} \n              confirm_style={\"fighter-confirmed fighter-confirmed2\"}\n              scrappy={scrappyBlue}></MatchCard>\n        </div>\n        <WinToggle \n              outRed={outRed} \n              setOutRed={setOutRed} \n              outBlue={outBlue} \n              setOutBlue={setOutBlue}\n              toggleState={toggleState}\n              setToggleState={setToggleState}></WinToggle>\n        <button onClick={handleEndMatch}>End Match</button>\n        <div className='match-history'>Match History</div>\n    </div>\n  )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}